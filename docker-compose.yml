version: '3'
services:

  redpanda-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.6
    container_name: redpanda-0
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644

  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.4.5
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
    ports:
      - 8082:8080
    depends_on:
      - redpanda-0

  invento-hub-product-service:
    image: codingwulf/invento-hub-product-service:latest
    ports:
      - 8080:8080
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=redpanda-0:9092
      - PRODUCT_CREATE_TOPIC=product-create
      - PRODUCT_UPDATE_TOPIC=product-update
      - PRODUCT_DELETE_TOPIC=product-delete
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_CONNECTION_STRING=jdbc:postgresql://product-db:5432/product
    depends_on:
      - redpanda-0
      - product-db

  product-db:
    image: postgres:latest
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=product

  invento-hub-order-service:
    image: codingwulf/invento-hub-order-service:latest
    ports:
      - 8083:8080
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=redpanda-0:9092
      - ORDER_CREATE_TOPIC=order-create
      - ORDER_UPDATE_TOPIC=product-update
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_CONNECTION_STRING=jdbc:postgresql://product-db:5432/product_order
    depends_on:
      - redpanda-0
      - order-db

  order-db:
    image: postgres:latest
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=product
      
  invento-hub-inventory-service:
    image: codingwulf/invento-hub-inventory-service:latest
    ports:
      - 8081:8080
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=redpanda-0:9092
      - PRODUCT_CREATE_TOPIC=product-create
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_CONNECTION_STRING=jdbc:postgresql://inventory-db:5432/inventory
    depends_on:
      - redpanda-0
      - inventory-db

  inventory-db:
    image: postgres:latest
    ports:
      - 5666:5432
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=inventory






